# -*- coding: utf-8 -*-

"""Top-level package for {{ full_project_slug }}."""

import os

from kiara.utils.class_loading import (
    KiaraEntryPointItem,
    find_data_types_under,
    find_kiara_model_classes_under,
    find_kiara_modules_under,
    find_pipeline_base_path_for_module,
)

__author__ = """{{ full_name }}"""
__email__ = "{{ email }}"


KIARA_METADATA = {
    "authors": [{"name": __author__, "email": __email__}],
    "description": "Kiara modules for: {{ project_name }}",
    "references": {
        "source_repo": {
            "desc": "The module package git repository.",
            "url": "https://github.com/{{ github_user }}/{{ full_project_slug }}",
        },
        "documentation": {
            "desc": "The url for the module package documentation.",
            "url": "https://{{ github_user }}.github.io/{{ full_project_slug }}/",
        },
    },
    "tags": ["{{ project_slug }}"],
    "labels": {"package": "{{ full_project_slug }}"},
}
"""Kiara metadata for the `{{ full_project_slug }}` module."""


find_modules: KiaraEntryPointItem = (
    find_kiara_modules_under,
    "{{ full_project_slug }}.modules",
)
"""Entry point to discover all `kiara` modules for this plugin."""

find_model_classes: KiaraEntryPointItem = (
    find_kiara_model_classes_under,
    "{{ full_project_slug }}.models",
)
"""Entry point to discover all `kiara` model classes for this plugin."""

find_data_types: KiaraEntryPointItem = (
    find_data_types_under,
    "{{ full_project_slug }}.data_types",
)
"""Entry point to discover all `kiara` data types for this plugin."""
find_pipelines: KiaraEntryPointItem = (
    find_pipeline_base_path_for_module,
    "{{ full_project_slug }}.pipelines",
    KIARA_METADATA,
)
"""Entry point to discover all `kiara` pipelines for this plugin."""


def get_version() -> str:
    """Get the current version of the `{{ full_project_slug }}` module.

    This tries to get the version from the current git commit or tag, if possible.

    Returns:
        str: The version string.

    """

    from importlib.metadata import PackageNotFoundError, version

    try:
        # Change here if project is renamed and does not equal the package name
        dist_name = __name__
        __version__ = version(dist_name)
    except PackageNotFoundError:

        try:
            version_file = os.path.join(os.path.dirname(__file__), "version.txt")

            if os.path.exists(version_file):
                with open(version_file, encoding="utf-8") as vf:
                    __version__ = vf.read()
            else:
                __version__ = "unknown"

        except Exception:
            pass

        if __version__ is None:
            __version__ = "unknown"

    return __version__
