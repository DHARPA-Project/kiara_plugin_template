# Tasks for the '{{ project_name }}' kiara plugin

This file contains open (and completed) tasks for this project

### Todo

- [ ] enable Github Pages on your repository
  - wait for the first 'build latest docs' action to finish: https://github.com/{{ github_user }}/{{ full_project_slug }}/actions
  - go to: https://github.com/{{ github_user }}/{{ full_project_slug }}/settings/pages
  - go to the 'Pages' sub-section
  - choose the `gh-pages` branch
  - leeve the `/root` path setting
  - click 'Save'
  - wait for the `pages build and deployment' action to finish (again, under the 'Actions' tab)
  - go to: https://{{ github_user }}.github.io/{{ full_project_slug }}/latest
  - check that the documentation is there
  - the root-level documentation page will not work yet, but will be fixed after you release the first version of your plugin:
    - https://{{ github_user }}.github.io/{{ full_project_slug }}
- [ ] create [trusted publisher](https://docs.pypi.org/trusted-publishers/) on https://pypi.org/manage/account/publishing/
  - settings to use:
    - `PyPI Project Name`: `{{ full_project_slug }}`
    - `Owner`: `{{ github_user }}`
    - `Repository name`: `{{ full_project_slug }}`
    - `Workflow name`: `build-linux.yaml`
    - `Environment name`: [leave empty]
{% if anaconda_user %}- [ ] configure conda package publishing
    - [ ] create an account on https://anaconda.org (if necessary)
    - [ ] create API token to allow Github actions to push to anaconda: https://anaconda.org/{{ anaconda_user }}/settings/access
      - settings to use:
        - `Token Name`: choose anything, maybe `{{ full_project_slug }} Github Action`
        - `Strength`: Strong
        - `Scopes`:
          - `Allow write access to the API site`
        - `Expiration date`: choose whatever you deem sensible
    - [ ] create new repository secret at: https://github.com/{{ github_user }}/{{ full_project_slug }}/settings/secrets/actions
        - `Name`: `ANACONDA_PUSH_TOKEN`
        - `Secret`: the token you created above
{% endif %}-[ ] examine and run example module (and module config)
  - `src/kiara_plugin/{{ project_slug }}/modules/__init__.py`
      - run it via: `uv run kiara run test_plugin.example text_1="Hello" text_2="World"`
  - `examples/jobs/example_job_{{ project_slug }}.yaml`
      - run it via: `uv run kiara run test_plugin.example_job_{{ project_slug }}.yaml`
- [ ] delete example module and job:
  - once you have confirmed everything works, delete the `ExampleModule` that comes with this template, along with everything related:
    - `src/kiara_plugin/{{ project_slug }}/modules/__init__.py`:
        - the `ExampleModuleConfig` class
        - the `ExampleModule` class
    - `examples/jobs/example_job_{{ project_slug }}.yaml`
    - `examples/pipelines/example_pipeline_{{ project_slug }}.yaml`
- [ ] start writing your own modules!

### In Progress

- [ ] create remote git repository on https://github.com/new:
  - settings to use:
    - `Owner`: `{{ github_user }}`
    - `Repository name`: `{{ full_project_slug }}`
    - `Description`: `{{ project_short_description }}`
- [ ] add the Github repository as remote:
  - `git remote add origin git@github.com:{{ github_user }}/{{ full_project_slug }}.git`
    or:
    `git remote add origin https://github.com/{{ github_user }}/{{ full_project_slug }}.git`
- [ ] push the initial version:
  - `git push --set-upstream origin develop`
  - now visit the Github Actions tab in your new repo and check that the pre-configured actions all run without error:
    - https://github.com/{{ github_user }}/{{ full_project_slug }}/actions

### Done

- [x] create project directory structure
- [x] create local git repository